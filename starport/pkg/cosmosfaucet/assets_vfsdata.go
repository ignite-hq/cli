// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package cosmosfaucet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets to serve openapi web page.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2021, 1, 23, 12, 12, 45, 590988828, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2021, 1, 23, 10, 44, 17, 729113171, time.UTC),
			uncompressedSize: 802,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x94\x93\x4f\x6b\xdc\x30\x10\xc5\xef\xfb\x29\xa6\xea\x21\x09\xd4\x56\x42\x4b\x28\x5b\xcb\x94\xf4\x0f\x14\x02\x2d\xb4\x3d\xf4\x54\x14\x69\xd6\x9e\xae\x2c\x19\x69\xb4\x1b\x53\xf2\xdd\x8b\xd7\x2d\xde\x6d\x36\x87\xd5\xc5\x9e\xd1\x6f\xde\x63\x9e\x71\xf5\xec\xfd\xe7\x77\xdf\x7e\x7c\xf9\x00\x2d\x77\xae\x5e\x54\xe3\x03\x9c\xf6\x8d\x12\xe8\x45\xbd\x00\x00\xa8\x5a\xd4\x76\x7a\xdd\x95\x1d\xb2\x06\xd3\xea\x98\x90\x95\xc8\xbc\x2a\x5e\x8b\xbd\x6b\x26\x76\x58\x7f\xd4\xd9\x20\x57\x72\xaa\xe6\x5b\x47\x7e\x0d\x11\x9d\x12\x89\x07\x87\xa9\x45\x64\x01\x3c\xf4\xa8\x04\xe3\x3d\x4b\x93\x92\x80\x36\xe2\x4a\x09\x29\xb3\xef\xd7\x4d\x69\x42\x27\xd3\x56\x37\x0d\xc6\x22\x53\x61\x29\xf1\xdb\x97\xe5\xab\xcb\xf2\x72\xaf\x5d\x8e\x83\x47\x8d\xc8\x04\xff\xcf\x82\x3a\xdd\xa0\xec\x7d\x73\x82\xc7\x4a\x6f\x46\x89\xe2\xea\xfa\xfe\xea\xba\xdc\xcd\xca\xbf\xc9\xc8\x39\x9a\xea\x2e\xd8\x61\xcf\xdf\xd2\x06\xc8\x2a\x31\x8b\x8a\xba\x92\x96\x36\xf5\x62\x86\x92\x89\xd4\x33\xa4\x68\x4e\xdc\xb6\xb8\xcb\xde\x3a\x2c\x7f\xa5\x51\x75\x92\xa9\xff\xd7\x9d\x1b\xe3\xd9\x92\xb7\x61\x5b\x06\xef\x82\xb6\xa0\x60\x95\xbd\x61\x0a\xfe\xfc\x02\x7e\x1f\x80\x7b\x70\x26\x50\xf0\x75\x72\xfd\xfe\xe9\x66\xe7\x79\xfe\x98\x1e\x4f\x8e\x6e\x09\x22\xf4\xe8\x75\x4f\xe5\xd0\x39\xf1\xe2\x28\x67\x43\xf7\x93\xec\x12\xce\x9e\xcf\xdb\x9c\x3d\x81\x22\xf6\xb7\xe4\xd7\xe4\x9b\x25\x70\xcc\x78\x1c\x73\x7a\x08\x99\x97\x20\x6e\x74\xc2\xdb\x5d\x21\x1e\x81\x0f\x17\x6f\x0e\x7a\x0f\x73\x58\x07\xf1\x55\x72\xfa\x8e\x95\x9c\xfe\x88\x3f\x01\x00\x00\xff\xff\x89\x12\x70\x52\x22\x03\x00\x00"),
		},
		"/openapi.yml": &vfsgen۰CompressedFileInfo{
			name:             "openapi.yml",
			modTime:          time.Date(2021, 1, 23, 12, 12, 44, 106299806, time.UTC),
			uncompressedSize: 1878,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xcc\x95\xcf\x6f\xeb\x36\x0c\xc7\xef\xfe\x2b\x08\x6d\xc0\x2e\xaf\x75\xd2\xbe\x62\x88\x6f\x05\xb6\x01\xef\x36\xec\x0d\x3b\xf5\x22\xcb\x4c\xa2\x46\x16\x5d\x92\x72\x93\xfe\xf5\x83\x6c\xc7\x49\x91\xfe\xd8\x76\xda\xc5\xb0\xe4\x2f\x29\xf2\xf3\x95\x2c\x79\xb6\x9b\x0d\x72\x05\xe6\xe6\x7a\x61\x0a\x1f\xd7\x54\x15\x00\x0d\x8a\x63\xdf\xa9\xa7\x58\x81\xf9\xcd\x26\x87\x0a\xf7\xbf\x7f\x83\x86\x1c\xd8\xd8\x00\xee\xbb\x40\x8c\x7c\x6d\x0a\x80\x1e\x59\x46\xe5\xf2\x7a\x91\xd3\x00\xa8\xd7\x80\x73\xa8\x29\x04\x39\xab\x72\xee\x2b\x48\x1c\x2a\xd8\xaa\x76\x52\x95\x65\x20\x67\xc3\x96\x44\xab\xaf\x77\x8b\x45\x21\x6e\x8b\x2d\x4a\x55\x5c\x81\xc9\x12\x53\x74\x56\xb7\x43\x60\x99\x1f\x00\x5d\xd6\x0e\x6f\x00\x92\xda\xd6\xf2\xa1\x02\xf3\x1d\x63\x03\x4a\x3b\x8c\x02\x4a\xc0\xe8\xd0\xf7\xc8\x60\x9d\xa3\x14\xd5\x4c\x01\x8e\xa2\xa4\x21\xff\x38\xbe\x02\x63\xbb\x2e\x78\x67\x73\xaf\xe5\xa3\x50\x3c\x4a\x3b\xa6\x26\xb9\x7f\x26\xb5\x6c\x5b\xd4\xa9\xc1\x51\xec\x33\x8f\x9a\x9a\xc3\x51\x04\x10\x6d\x8b\x17\x93\xaf\x51\x0f\x6d\x38\xf2\x51\x80\xf1\x29\xa1\x28\x50\xfd\x88\x4e\x1f\xe2\x43\xbc\x5f\x2b\x32\xb4\x76\xe7\xe3\x06\x2c\x88\x6d\xbb\x80\x80\x7b\x74\x29\x87\x43\x7d\x00\xdd\x22\xfc\x3a\x4c\x20\xd4\x49\x35\xcf\x62\xa0\xe7\x2f\xd0\x7b\xf1\x0a\x6b\x0a\x81\x9e\x73\x7c\xf0\x71\x97\x49\x09\xe2\x31\xd3\xc4\xea\x27\x81\xda\x06\x1b\x1d\x8e\x2e\xbd\x32\x69\x79\xbb\xfc\xb9\xac\x6d\xdc\x95\x93\x46\x4a\x47\xd2\x92\x2c\xd3\x4b\xff\xb5\x5f\x6d\x56\xfb\x10\x6f\x9e\xf6\x37\xbd\x3e\x6d\x5f\x56\xab\xc3\x3e\xb5\xb7\xb7\xce\x86\x47\x7b\xd7\x73\x7a\x39\x35\x9e\xfb\xf3\x8c\x4d\x05\xca\x09\xe7\xe9\x61\x03\xd8\x6a\x1e\x03\xfc\xc8\xb8\xae\xc0\xfc\x50\x36\xb8\xf6\xd1\xe7\x56\xa5\xcc\xa0\xfe\x18\x09\x1d\x53\x32\x4a\x47\x51\x4e\x8e\x01\x98\xbb\xc5\xc2\x9c\xe7\x7a\x4d\xfb\x5b\x54\xe4\x68\x03\x20\x33\xf1\xa9\x34\x73\xf3\x61\xd8\x7d\x08\x5f\x40\xa8\x45\x20\x86\x48\x71\x32\xcc\x32\x82\x60\x1c\xac\xfa\xeb\xff\x46\xfb\x2d\xb0\x1f\xa2\x1d\x59\x9a\xe2\xec\x4b\x8e\x3d\xe3\x3e\xa6\xd2\x43\x97\x37\xf5\xb8\x4b\xc7\xf5\x66\x67\xe7\xc3\x60\x9b\x86\x51\xa4\x98\xce\x55\x87\xac\xfe\xe4\xd3\xf4\xf5\x54\xda\x94\x53\x94\x7d\xdc\x9c\x1f\x95\xb5\x4d\x41\x2b\x30\xff\x09\xc2\xe0\xd2\xc5\x22\x96\xd9\x1e\x2e\xd7\x38\xc3\x74\x05\xcb\xc5\xf0\x67\x99\xe7\xbc\x62\x2b\xe7\x92\x8b\x82\x67\x52\x23\xc6\x77\x51\x5d\xc2\x18\xb6\xe2\x27\x28\x94\x6d\x94\xf5\xd9\xef\xe6\xbd\x6e\x2e\x0a\x7d\xd3\xf0\x3f\xa7\x74\x53\xe1\xc7\xe1\xbf\xf0\x37\xa3\x9d\x07\xa2\x56\xd3\x7b\x5e\x67\xe5\x27\xdd\x8d\xf1\x9f\x88\x3e\xc6\x54\xe0\x7e\x3c\xd9\xbf\x90\x93\x37\x2e\x34\x1f\x1b\xa0\xa4\xd0\x12\x23\xd8\x3a\xbf\x7e\x57\xcb\x1d\xf1\xd0\xe2\x70\x41\x99\xe3\x0d\xb5\xf1\xba\x4d\xf5\xb5\xa3\xb6\x54\x8c\x0d\x72\xeb\xa3\x96\x32\xe9\x4b\x65\xc4\xb2\xc1\x1e\x03\x75\x65\x43\x4e\x4c\xf1\x77\x00\x00\x00\xff\xff\x84\x05\x67\xa2\x56\x07\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
		fs["/openapi.yml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
