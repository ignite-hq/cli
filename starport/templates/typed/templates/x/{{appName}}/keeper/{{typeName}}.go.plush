package keeper

import (
	sdk "github.com/cosmos/cosmos-sdk/types"
	"<%= ModulePath %>/x/<%= AppName %>/types"
  "github.com/cosmos/cosmos-sdk/codec"
)

func (k Keeper) Create<%= title(TypeName) %>(ctx sdk.Context, <%= TypeName %> types.<%= title(TypeName) %>) {
	store := ctx.KVStore(k.storeKey)
	key := []byte(types.<%= title(TypeName) %>Prefix + <%= TypeName %>.ID)
	value := k.cdc.MustMarshalBinaryLengthPrefixed(<%= TypeName %>)
	store.Set(key, value)
}

func (k Keeper) Get<%= title(TypeName) %>(ctx sdk.Context, <%= TypeName %>Key string) {
	store := ctx.KVStore(k.storeKey)
	var <%= TypeName %> types.<%= title(TypeName) %>
	byteKey := []byte(types.<%= title(TypeName) %>Prefix + <%= TypeName %>Key)
	err := k.cdc.UnmarshalBinaryLengthPrefixed(store.Get(byteKey), &<%= TypeName %>)
	if err != nil {
		return <%= TypeName %>, err
	}
	return <%= TypeName %>, nil
}

func list<%= title(TypeName) %>(ctx sdk.Context, k Keeper) ([]byte, error) {
  var <%= TypeName %>List []types.<%= title(TypeName) %>
  store := ctx.KVStore(k.storeKey)
  iterator := sdk.KVStorePrefixIterator(store, []byte(types.<%= title(TypeName) %>Prefix))
  for ; iterator.Valid(); iterator.Next() {
    var <%= TypeName %> types.<%= title(TypeName) %>
    k.cdc.MustUnmarshalBinaryLengthPrefixed(store.Get(iterator.Key()), &<%= TypeName %>)
    <%= TypeName %>List = append(<%= TypeName %>List, <%= TypeName %>)
  }
  res := codec.MustMarshalJSONIndent(k.cdc, <%= TypeName %>List)
  return res, nil
}