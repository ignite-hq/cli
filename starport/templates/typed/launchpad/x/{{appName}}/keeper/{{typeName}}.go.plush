package keeper

import (
	sdk "github.com/cosmos/cosmos-sdk/types"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"

	"<%= ModulePath %>/x/<%= AppName %>/types"
    "github.com/cosmos/cosmos-sdk/codec"
)

// Create<%= title(TypeName) %> creates a <%= TypeName %>
func (k Keeper) Create<%= title(TypeName) %>(ctx sdk.Context, <%= TypeName %> types.<%= title(TypeName) %>) {
	store := ctx.KVStore(k.storeKey)
	key := []byte(types.<%= title(TypeName) %>Prefix + <%= TypeName %>.ID)
	value := k.cdc.MustMarshalBinaryLengthPrefixed(<%= TypeName %>)
	store.Set(key, value)
}

// Get<%= title(TypeName) %> returns the <%= TypeName %> information
func (k Keeper) Get<%= title(TypeName) %>(ctx sdk.Context, key string) (types.<%= title(TypeName) %>, error) {
	store := ctx.KVStore(k.storeKey)
	var <%= TypeName %> types.<%= title(TypeName) %>
	byteKey := []byte(types.<%= title(TypeName) %>Prefix + key)
	err := k.cdc.UnmarshalBinaryLengthPrefixed(store.Get(byteKey), &<%= TypeName %>)
	if err != nil {
		return <%= TypeName %>, err
	}
	return <%= TypeName %>, nil
}

// Set<%= title(TypeName) %> sets a <%= TypeName %>
func (k Keeper) Set<%= title(TypeName) %>(ctx sdk.Context, <%= TypeName %> types.<%= title(TypeName) %>) {
	<%= TypeName %>Key := <%= TypeName %>.ID
	store := ctx.KVStore(k.storeKey)
	bz := k.cdc.MustMarshalBinaryLengthPrefixed(<%= TypeName %>)
	key := []byte(types.<%= title(TypeName) %>Prefix + <%= TypeName %>Key)
	store.Set(key, bz)
}

// Delete<%= title(TypeName) %> deletes a <%= TypeName %>
func (k Keeper) Delete<%= title(TypeName) %>(ctx sdk.Context, key string) {
	store := ctx.KVStore(k.storeKey)
	store.Delete([]byte(types.<%= title(TypeName) %>Prefix + key))
}

//
// Functions used by querier
//

func list<%= title(TypeName) %>(ctx sdk.Context, k Keeper) ([]byte, error) {
	var <%= TypeName %>List []types.<%= title(TypeName) %>
	store := ctx.KVStore(k.storeKey)
	iterator := sdk.KVStorePrefixIterator(store, []byte(types.<%= title(TypeName) %>Prefix))
	for ; iterator.Valid(); iterator.Next() {
		var <%= TypeName %> types.<%= title(TypeName) %>
		k.cdc.MustUnmarshalBinaryLengthPrefixed(store.Get(iterator.Key()), &<%= TypeName %>)
		<%= TypeName %>List = append(<%= TypeName %>List, <%= TypeName %>)
	}
	res := codec.MustMarshalJSONIndent(k.cdc, <%= TypeName %>List)
	return res, nil
}

func get<%= title(TypeName) %>(ctx sdk.Context, path []string, k Keeper) (res []byte, sdkError error) {
	key := path[0]
	<%= TypeName %>, err := k.Get<%= title(TypeName) %>(ctx, key)
	if err != nil {
		return nil, err
	}

	res, err = codec.MarshalJSONIndent(k.cdc, <%= TypeName %>)
	if err != nil {
		return nil, sdkerrors.Wrap(sdkerrors.ErrJSONMarshal, err.Error())
	}

	return res, nil
}

// Get creator of the item
func (k Keeper) Get<%= title(TypeName) %>Owner(ctx sdk.Context, key string) sdk.AccAddress {
	<%= TypeName %>, err := k.Get<%= title(TypeName) %>(ctx, key)
	if err != nil {
		return nil
	}
	return <%= TypeName %>.Creator
}


// Check if the key exists in the store
func (k Keeper) <%= title(TypeName) %>Exists(ctx sdk.Context, key string) bool {
	store := ctx.KVStore(k.storeKey)
	return store.Has([]byte(types.<%= title(TypeName) %>Prefix + key))
}
