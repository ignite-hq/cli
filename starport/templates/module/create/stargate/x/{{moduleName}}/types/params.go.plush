package types

import (
	"errors"
	"fmt"
	"time"

	paramtypes "github.com/cosmos/cosmos-sdk/x/params/types"
	"gopkg.in/yaml.v2"
)

var (
	// TODO: Determine default values
	<%= for (i, param) in params { %>
	Key<%= param.Name.UpperCamel %> = MinLaunchTime = []byte("<%= param.Name.UpperCamel %>")
	Default<%= param.Name.UpperCamel %> <%= param.DataType() %> = <%= param.ValueIndex() %>

	<% } %>
)

var _ paramtypes.ParamSet = (*Params)(nil)

// ParamKeyTable the param key table for launch module
func ParamKeyTable() paramtypes.KeyTable {
	return paramtypes.NewKeyTable().RegisterParamSet(&Params{})
}

// NewParams creates a new Params instance
func NewParams(minLaunchTime, maxLaunchTime uint64) Params {
	return Params{<%= for (param) in params { %>
        <%= param.Name.UpperCamel %>: <%= param.Name.LowerCamel %>,<% } %>
	}
}

// DefaultParams returns a default set of parameters
func DefaultParams() Params {
	return NewParams(<%= for (param) in params { %>
        Default<%= param.Name.UpperCamel %>,<% } %>
	)
}

// ParamSetPairs get the params.ParamSet
func (p *Params) ParamSetPairs() paramtypes.ParamSetPairs {
	return paramtypes.ParamSetPairs{<%= for (param) in params { %>
		paramtypes.NewParamSetPair(Key<%= param.Name.UpperCamel %>, &p.<%= param.Name.UpperCamel %>, validate<%= param.Name.UpperCamel %>),
		<% } %>
	}
}

// Validate validates the set of params
func (p Params) Validate() error {
	<%= for (param) in params { %>
   	if err := validate<%= param.Name.UpperCamel %>(p.<%= param.Name.UpperCamel %>); err != nil {
   		return err
   	}
	<% } %>
	return nil
}

// String implements the Stringer interface.
func (p Params) String() string {
	out, _ := yaml.Marshal(p)
	return string(out)
}

<%= for (param) in params { %>
// validate<%= param.Name.UpperCamel %> validates the <%= param.Name.UpperCamel %> param
func validate<%= param.Name.UpperCamel %>(<%= param.Name.LowerCamel %> interface{}) error {
	// TODO implement validation
	return nil
}
<% } %>