package types

import (
	"encoding/binary"

	sdk "github.com/cosmos/cosmos-sdk/types"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
)

var (
	_ sdk.Msg = &Msg<%= oracleName.UpperCamel %>Data{}

	// <%= oracleName.UpperCamel %>ResultStoreKeyPrefix is a prefix for storing result
	<%= oracleName.UpperCamel %>ResultStoreKeyPrefix = []byte{0xff}

	// Last<%= oracleName.UpperCamel %>IDKey is the key for the last request id
	Last<%= oracleName.UpperCamel %>IDKey = []byte{0x01}
)

type (
	// OracleScriptID is the type-safe unique identifier type for oracle scripts.
	OracleScriptID int64

	// RequestID is the type-safe unique identifier type for data requests.
	RequestID int64
)

// NewMsg<%= oracleName.UpperCamel %>Data creates a new <%= oracleName.UpperCamel %> message
func NewMsg<%= oracleName.UpperCamel %>Data(
	creator string,
	oracleScriptID OracleScriptID,
	sourceChannel string,
	calldata *<%= oracleName.UpperCamel %>CallData,
	askCount uint64,
	minCount uint64,
	feeLimit sdk.Coins,
	requestKey string,
	prepareGas uint64,
	executeGas uint64,
) *Msg<%= oracleName.UpperCamel %>Data {
	return &Msg<%= oracleName.UpperCamel %>Data{
		Creator:        creator,
		OracleScriptID: int64(oracleScriptID),
		SourceChannel:  sourceChannel,
		Calldata:       calldata,
		AskCount:       askCount,
		MinCount:       minCount,
		FeeLimit:       feeLimit,
		RequestKey:     requestKey,
		PrepareGas:     prepareGas,
		ExecuteGas:     executeGas,
	}
}

// Route returns the message route
func (m *Msg<%= oracleName.UpperCamel %>Data) Route() string {
	return RouterKey
}

// Type returns the message type
func (m *Msg<%= oracleName.UpperCamel %>Data) Type() string {
	return "<%= oracleName.UpperCamel %>Data"
}

// GetSigners returns the message signers
func (m *Msg<%= oracleName.UpperCamel %>Data) GetSigners() []sdk.AccAddress {
	creator, err := sdk.AccAddressFromBech32(m.Creator)
	if err != nil {
		panic(err)
	}
	return []sdk.AccAddress{creator}
}

// GetSignBytes returns the signed bytes from the message
func (m *Msg<%= oracleName.UpperCamel %>Data) GetSignBytes() []byte {
	bz := ModuleCdc.MustMarshalJSON(m)
	return sdk.MustSortJSON(bz)
}

// ValidateBasic check the basic message validation
func (m *Msg<%= oracleName.UpperCamel %>Data) ValidateBasic() error {
	_, err := sdk.AccAddressFromBech32(m.Creator)
	if err != nil {
		return sdkerrors.Wrapf(sdkerrors.ErrInvalidAddress, "invalid creator address (%s)", err)
	}
	return nil
}

// ResultStoreKey is a function to generate key for each result in store
func ResultStoreKey(requestID RequestID) []byte {
	return append(<%= oracleName.UpperCamel %>ResultStoreKeyPrefix, int64ToBytes(int64(requestID))...)
}

// int64ToBytes convert int64 to a byte slice
func int64ToBytes(num int64) []byte {
	result := make([]byte, 8)
	binary.BigEndian.PutUint64(result, uint64(num))
	return result
}
