package keeper

import (
	sdk "github.com/cosmos/cosmos-sdk/types"
	"<%= modulePath %>/x/<%= moduleName %>/types"
	channeltypes "github.com/cosmos/cosmos-sdk/x/ibc/core/04-channel/types"
)

// OnRecvPacket processes packet reception
func (k Keeper) OnRecv<%= title(packetName) %>Packet(ctx sdk.Context, packet channeltypes.Packet, data types.<%= title(packetName) %>PacketData) error {
	// validate packet data upon receiving
	if err := data.ValidateBasic(); err != nil {
		return err
	}

	// TODO: packet reception logic

	return nil
}

// OnAcknowledgementPacket responds to the the success or failure of a packet
// acknowledgement written on the receiving chain.
func (k Keeper) OnAcknowledgement<%= title(packetName) %>Packet(ctx sdk.Context, packet channeltypes.Packet, data types.<%= title(packetName) %>PacketData, ack channeltypes.Acknowledgement) error {
	switch ack.Response.(type) {
	case *channeltypes.Acknowledgement_Error:

		// TODO: failed acknowledgement logic

		return nil
	default:

	    // TODO: successful acknowledgement logic

		return nil
	}
}

// OnTimeoutPacket responds to the case where a packet has not been transmitted because of a timeout
func (k Keeper) OnTimeout<%= title(packetName) %>Packet(ctx sdk.Context, packet channeltypes.Packet, data types.<%= title(packetName) %>PacketData) error {

    // TODO: packet timeout logic

	return nil
}