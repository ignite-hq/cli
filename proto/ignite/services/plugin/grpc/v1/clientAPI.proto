syntax = "proto3";

package ignite.services.plugin.grpc.v1;

option go_package = "github.com/ignite/cli/ignite/services/plugin/grpc/v1";

// Dependecy keeps data about Go module dependencies.
message Dependency {
  // Path is the absolute path to the Go module.
  string path = 1;

  // Modules contains the list of modules defined by the dependency.
  repeated Module modules = 2;
}

// Module keeps metadata about a Cosmos SDK module.
message Module {
  // Name of the module.
  string name = 1;

  // Go module path of the app where the module is defined.
  string go_module_path = 2;

  // Package contains proto package info.
  ProtoPackage package = 3;

  // Messages is the list of sdk.Msg that the module implements.
  repeated Message messages = 4;

  // HTTP queries is a list of module queries.
  repeated HTTPQuery http_queries = 5;

  // Types is a list of proto types that could be used by the module.
  repeated Type types = 6;
}

// ProtoPackage represents a proto package.
message ProtoPackage {
  // Name of the proto package.
  string name = 1;

  // Path of the proto package.
  string path = 2;

  // Files is list of package proto files.
  repeated ProtoFile files = 3;

  // Go import name for the proto package.
  string go_import_name = 4;

  // Messages is list of messages defined within the proto package.
  repeated ProtoMessage messages = 5;

  // Services is list of services defined within the proto package.
  repeated ProtoService services = 6;
}

// ProtoFile represents a proto file.
message ProtoFile {
  // Path to the file.
  string path = 1;

  // Dependencies is a list of imported proto packages.
  repeated string dependencies = 2;
}

// ProtoMessage represents a proto message.
message ProtoMessage {
  // Name of the message.
  string name = 1;

  // Path of the proto file where the message is defined.
  string path = 2;

  // Highest field name is the highest field number among fields of the message.
  // This allows to determine new field number when writing to proto message.
  int32 highest_field_number = 3;

  // Fields contains message's field names and types.
  map<string, string> fields = 4;
}

// ProtoService represents a proto RPC service.
message ProtoService {
  // Name of the service.
  string name = 1;

  // Functions is a list of RPC functions.
  repeated ProtoServiceFunc functions = 2;
}

// Proto service func represents a proto RPC function.
message ProtoServiceFunc {
  // Name of the RPC function.
  string name = 1;

  // Request type is the request type of the RPC function.
  string request_type = 2;

  // Return type is the return type of the RPC function.
  string return_type = 3;

  // Paginated indicates that the function is using pagination.
  bool paginated = 4;

  // HTTP rules keeps info about HTTP annotations of query.
  repeated HTTPRule http_rules = 5;
}

// Message keeps metadata about an sdk.Msg implementation.
message Message {
  // Name of the type.
  string name = 1;

  // URI of the type.
  string uri = 2;

  // File path is the path of the proto file where message is defined.
  string file_path = 3;
}

// HTTPQuery is an SDK query.
message HTTPQuery {
  // Name of the RPC function.
  string name = 1;

  // Full name of the query with service name and RPC function name.
  string full_name = 2;

  // Paginated indicates that the query is using pagination.
  bool paginated = 3;

  // HTTP rules keeps info about HTTP annotations of query.
  repeated HTTPRule rules = 4;
}

// HTTP rule keeps info about a configured HTTP rule of an RPC function.
message HTTPRule {
  // Params is a list of parameters defined in the HTTP endpoint itself.
  repeated string params = 1;

  // Has query indicates if there is a request query.
  bool has_query = 2;

  // Has body indicates if there is a request payload.
  bool has_body = 3;
}

// Type is a proto type.
message Type {
  // Name pf the type.
  string name = 1;

  // File path is the path of the .proto file where message is defined at.
  string file_path = 2;
}
