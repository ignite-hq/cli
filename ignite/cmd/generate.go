package ignitecmd

import (
	"github.com/spf13/cobra"
	flag "github.com/spf13/pflag"
)

const (
	flagUpdateBufModule = "update-buf-module"
)

// NewGenerate returns a command that groups code generation related sub commands.
func NewGenerate() *cobra.Command {
	c := &cobra.Command{
		Use:   "generate [command]",
		Short: "Generate clients, API docs from source code",
		Long: `Generate clients, API docs from source code.

Such as compiling protocol buffer files into Go or implement particular
functionality, for example, generating an OpenAPI spec.

Produced source code can be regenerated by running a command again and is not
meant to be edited by hand.
`,
		Aliases:           []string{"g"},
		Args:              cobra.ExactArgs(1),
		PersistentPreRunE: migrationPreRunHandler,
	}

	c.PersistentFlags().AddFlagSet(flagSetUpdateBufModule())

	flagSetPath(c)
	flagSetClearCache(c)

	c.AddCommand(NewGenerateGo())
	c.AddCommand(NewGeneratePulsar())
	c.AddCommand(NewGenerateTSClient())
	c.AddCommand(NewGenerateVuex())
	c.AddCommand(NewGenerateComposables())
	c.AddCommand(NewGenerateHooks())
	c.AddCommand(NewGenerateOpenAPI())

	return c
}

func flagSetUpdateBufModule() *flag.FlagSet {
	fs := flag.NewFlagSet("", flag.ContinueOnError)
	fs.Bool(flagUpdateBufModule, false, "update Buf config with missing proto dependencies")
	return fs
}

func flagGetUpdateBufModule(cmd *cobra.Command) bool {
	skip, _ := cmd.Flags().GetBool(flagUpdateBufModule)
	return skip
}
