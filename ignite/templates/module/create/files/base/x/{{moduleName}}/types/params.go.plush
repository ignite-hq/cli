package types

<%= for (param) in params { %>
	// Default<%= param.Name.UpperCamel %> represents the <%= param.Name.UpperCamel %> default value.
	// TODO: Determine the default value.
	var Default<%= param.Name.UpperCamel %> <%= param.DataType() %> = <%= if (param.DataType() == "string") { %>"<%= param.Name.Snake %>"<% } else { %><%= param.ValueIndex() %><% } %>
<% } %>

// this line is used by starport scaffolding # types/params/vars

// NewParams creates a new Params instance.
func NewParams(<%= for (param) in params { %>
	<%= param.Name.LowerCamel %> <%= param.DataType() %>,<% } %>
	// this line is used by starport scaffolding # types/params/new/parameter
) Params {
	return Params{<%= for (param) in params { %>
        <%= param.Name.UpperCamel %>: <%= param.Name.LowerCamel %>,<% } %>
        // this line is used by starport scaffolding # types/params/new/struct
	}
}

// DefaultParams returns a default set of parameters.
func DefaultParams() Params {
	return NewParams(<%= for (param) in params { %>
        Default<%= param.Name.UpperCamel %>,<% } %>
        // this line is used by starport scaffolding # types/params/default
	)
}

// Validate validates the set of params.
func (p Params) Validate() error {<%= for (param) in params { %>
   	if err := validate<%= param.Name.UpperCamel %>(p.<%= param.Name.UpperCamel %>); err != nil {
   		return err
   	}
   	<% } %>

   	// this line is used by starport scaffolding # types/params/validate

	return nil
}

<%= for (param) in params { %>
// validate<%= param.Name.UpperCamel %> validates the <%= param.Name.UpperCamel %> parameter.
func validate<%= param.Name.UpperCamel %>(v <%= param.DataType() %>) error {
	// TODO implement validation
	return nil
}
<% } %>

// this line is used by starport scaffolding # types/params/validation