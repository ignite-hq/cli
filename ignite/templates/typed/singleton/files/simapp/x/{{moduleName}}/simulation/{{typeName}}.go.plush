package simulation

import (
	"math/rand"

	"github.com/cosmos/cosmos-sdk/simsx"
	sdk "github.com/cosmos/cosmos-sdk/types"

	"<%= ModulePath %>/x/<%= ModuleName %>/keeper"
	"<%= ModulePath %>/x/<%= ModuleName %>/types"
)

func MsgCreate<%= TypeName.UpperCamel %>Factory(k keeper.Keeper) simsx.SimMsgFactoryFn[*types.MsgCreate<%= TypeName.UpperCamel %>] {
	return func(ctx context.Context, testData *simsx.ChainDataSource, reporter simsx.SimulationReporter) ([]simsx.SimAccount, *types.MsgCreate<%= TypeName.UpperCamel %>) {
		from := testData.AnyAccount(reporter)
		msg := &types.MsgCreate<%= TypeName.UpperCamel %>{
			<%= MsgSigner.UpperCamel %>: from.AddressBech32,
		}

		found, err := k.<%= TypeName.UpperCamel %>.Has(ctx)
		if err == nil && found {
			reporter.Skip("<%= TypeName.UpperCamel %> already exist")
			return nil, nil
		} else if err != nil {
			reporter.Skip(err.Error())
			return nil, nil
		}

		return []simsx.SimAccount{from}, msg
	}
}

func MsgUpdate<%= TypeName.UpperCamel %>Factory(k keeper.Keeper) simsx.SimMsgFactoryFn[*types.MsgUpdate<%= TypeName.UpperCamel %>] {
	return func(ctx context.Context, testData *simsx.ChainDataSource, reporter simsx.SimulationReporter) ([]simsx.SimAccount, *types.MsgUpdate<%= TypeName.UpperCamel %>) {
		var (
			msg = &types.MsgUpdate<%= TypeName.UpperCamel %>{}
		)

		<%= TypeName.LowerCamel %>, err := k.<%= TypeName.UpperCamel %>.Get(ctx)
		if err != nil {
			reporter.Skip("<%= TypeName.LowerCamel %> store is empty")
			return nil, nil
		}

		simAccount := testData.GetAccount(reporter, <%= TypeName.LowerCamel %>.<%= MsgSigner.UpperCamel %>)
		msg.<%= MsgSigner.UpperCamel %> = simAccount.AddressBech32

		return []simsx.SimAccount{simAccount}, msg
	}
}

func MsgDelete<%= TypeName.UpperCamel %>Factory(k keeper.Keeper) simsx.SimMsgFactoryFn[*types.MsgDelete<%= TypeName.UpperCamel %>] {
	return func(ctx context.Context, testData *simsx.ChainDataSource, reporter simsx.SimulationReporter) ([]simsx.SimAccount, *types.MsgDelete<%= TypeName.UpperCamel %>) {
		var (
			msg = &types.MsgDelete<%= TypeName.UpperCamel %>{}
		)

		<%= TypeName.LowerCamel %>, err := k.<%= TypeName.UpperCamel %>.Get(ctx)
		if err != nil {
			reporter.Skip("<%= TypeName.LowerCamel %> store is empty")
			return nil, nil
		}

		simAccount := testData.GetAccount(reporter, <%= TypeName.LowerCamel %>.<%= MsgSigner.UpperCamel %>)
		msg.<%= MsgSigner.UpperCamel %> = simAccount.AddressBech32

		return []simsx.SimAccount{simAccount}, msg
	}
}
