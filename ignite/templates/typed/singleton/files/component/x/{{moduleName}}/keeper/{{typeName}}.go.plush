package keeper

import (
	"context"

	"github.com/cosmos/cosmos-sdk/runtime"
	"<%= ModulePath %>/x/<%= ModuleName %>/types"
	"cosmossdk.io/store/prefix"
)

// Set<%= TypeName.UpperCamel %> set <%= TypeName.LowerCamel %> in the store
func (k Keeper) Set<%= TypeName.UpperCamel %>(ctx context.Context, <%= TypeName.LowerCamel %> types.<%= TypeName.UpperCamel %>) {
    storeAdapter := runtime.KVStoreAdapter(k.storeService.OpenKVStore(ctx))
	store :=  prefix.NewStore(storeAdapter, types.KeyPrefix(types.<%= TypeName.UpperCamel %>Key))
	b := k.cdc.MustMarshal(&<%= TypeName.LowerCamel %>)
	store.Set([]byte{0}, b)
}

// Get<%= TypeName.UpperCamel %> returns <%= TypeName.LowerCamel %>
func (k Keeper) Get<%= TypeName.UpperCamel %>(ctx context.Context) (val types.<%= TypeName.UpperCamel %>, found bool) {
    storeAdapter := runtime.KVStoreAdapter(k.storeService.OpenKVStore(ctx))
	store := prefix.NewStore(storeAdapter, types.KeyPrefix(types.<%= TypeName.UpperCamel %>Key))

	b := store.Get([]byte{0})
    if b == nil {
        return val, false
    }

	k.cdc.MustUnmarshal(b, &val)
	return val, true
}

// Remove<%= TypeName.UpperCamel %> removes <%= TypeName.LowerCamel %> from the store
func (k Keeper) Remove<%= TypeName.UpperCamel %>(ctx context.Context) {
    storeAdapter := runtime.KVStoreAdapter(k.storeService.OpenKVStore(ctx))
	store := prefix.NewStore(storeAdapter, types.KeyPrefix(types.<%= TypeName.UpperCamel %>Key))
	store.Delete([]byte{0})
}
