package cli_test

import (
	"fmt"
	"testing"

	clitestutil "github.com/cosmos/cosmos-sdk/testutil/cli"
	"github.com/stretchr/testify/require"
	tmcli "github.com/cometbft/cometbft/libs/cli"
	"google.golang.org/grpc/status"

	"<%= ModulePath %>/testutil/nullify"
	"<%= ModulePath %>/x/<%= ModuleName %>/client/cli"
    "<%= ModulePath %>/x/<%= ModuleName %>/types"
)

func (s *IntegrationTestSuite) networkWith<%= TypeName.UpperCamel %>Objects() (types.<%= TypeName.UpperCamel %>) {
	s.T().Helper()
	state := types.GenesisState{<%= if (IsIBC) { %>PortId: types.PortID<% } %>}
	<%= TypeName.LowerCamel %> := &types.<%= TypeName.UpperCamel %>{}
	nullify.Fill(&<%= TypeName.LowerCamel %>)
	state.<%= TypeName.UpperCamel %> = <%= TypeName.LowerCamel %>
	buf, err := s.cfg.Codec.MarshalJSON(&state)
	s.Require().NoError(err)
	s.cfg.GenesisState[types.ModuleName] = buf
	return *state.<%= TypeName.UpperCamel %>
}

func (s *IntegrationTestSuite) TestShow<%= TypeName.UpperCamel %>() {
	var (
		obj    = s.networkWith<%= TypeName.UpperCamel %>Objects()
		net    = s.network()
		ctx    = net.Validators[0].ClientCtx
		common = []string{
			fmt.Sprintf("--%s=json", tmcli.OutputFlag),
		}
	)
	tests := []struct {
		desc string
		args []string
		err  error
		obj  types.<%= TypeName.UpperCamel %>
	}{
		{
			desc: "get",
			args: common,
			obj:  obj,
		},
	}
	for _, tc := range tests {
		s.T().Run(tc.desc, func(t *testing.T) {
			args := append([]string{}, tc.args...)
			out, err := clitestutil.ExecTestCLICmd(ctx, cli.CmdShow<%= TypeName.UpperCamel %>(), args)
			if tc.err != nil {
				stat, ok := status.FromError(tc.err)
				require.True(t, ok)
				require.ErrorIs(t, stat.Err(), tc.err)
				return
			}
            require.NoError(t, err)
            var resp types.QueryGet<%= TypeName.UpperCamel %>Response
            require.NoError(t, s.cfg.Codec.UnmarshalJSON(out.Bytes(), &resp))
            require.NotNil(t, resp.<%= TypeName.UpperCamel %>)
            require.Equal(t,
                nullify.Fill(&tc.obj),
                nullify.Fill(&resp.<%= TypeName.UpperCamel %>),
            )
		})
	}
}

