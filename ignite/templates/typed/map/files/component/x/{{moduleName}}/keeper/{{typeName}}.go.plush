package keeper

import (
	"context"

	"cosmossdk.io/store/prefix"
	storetypes "cosmossdk.io/store/types"
	"github.com/cosmos/cosmos-sdk/runtime"
	"<%= ModulePath %>/x/<%= ModuleName %>/types"
)

// Set<%= TypeName.UpperCamel %> set a specific <%= TypeName.LowerCamel %> in the store from its index
func (k Keeper) Set<%= TypeName.UpperCamel %>(ctx context.Context, <%= TypeName.LowerCamel %> types.<%= TypeName.UpperCamel %>) {
    storeAdapter := runtime.KVStoreAdapter(k.storeService.OpenKVStore(ctx))
	store :=  prefix.NewStore(storeAdapter, types.KeyPrefix(types.<%= TypeName.UpperCamel %>KeyPrefix))
	b := k.cdc.MustMarshal(&<%= TypeName.LowerCamel %>)
	store.Set(types.<%= TypeName.UpperCamel %>Key(
        <%= for (i, index) in Indexes { %><%= TypeName.LowerCamel %>.<%= index.Name.UpperCamel %>,
    <% } %>), b)
}

// Get<%= TypeName.UpperCamel %> returns a <%= TypeName.LowerCamel %> from its index
func (k Keeper) Get<%= TypeName.UpperCamel %>(
    ctx context.Context,
    <%= for (i, index) in Indexes { %><%= index.Name.LowerCamel %> <%= index.DataType() %>,
    <% } %>
) (val types.<%= TypeName.UpperCamel %>, found bool) {
    storeAdapter := runtime.KVStoreAdapter(k.storeService.OpenKVStore(ctx))
	store := prefix.NewStore(storeAdapter, types.KeyPrefix(types.<%= TypeName.UpperCamel %>KeyPrefix))

	b := store.Get(types.<%= TypeName.UpperCamel %>Key(
        <%= for (i, index) in Indexes { %><%= index.Name.LowerCamel %>,
    <% } %>))
    if b == nil {
        return val, false
    }

	k.cdc.MustUnmarshal(b, &val)
	return val, true
}

// Remove<%= TypeName.UpperCamel %> removes a <%= TypeName.LowerCamel %> from the store
func (k Keeper) Remove<%= TypeName.UpperCamel %>(
    ctx context.Context,
    <%= for (i, index) in Indexes { %><%= index.Name.LowerCamel %> <%= index.DataType() %>,
    <% } %>
) {
    storeAdapter := runtime.KVStoreAdapter(k.storeService.OpenKVStore(ctx))
	store := prefix.NewStore(storeAdapter, types.KeyPrefix(types.<%= TypeName.UpperCamel %>KeyPrefix))
	store.Delete(types.<%= TypeName.UpperCamel %>Key(
	    <%= for (i, index) in Indexes { %><%= index.Name.LowerCamel %>,
    <% } %>))
}

// GetAll<%= TypeName.UpperCamel %> returns all <%= TypeName.LowerCamel %>
func (k Keeper) GetAll<%= TypeName.UpperCamel %>(ctx context.Context) (list []types.<%= TypeName.UpperCamel %>) {
    storeAdapter := runtime.KVStoreAdapter(k.storeService.OpenKVStore(ctx))
    store := prefix.NewStore(storeAdapter, types.KeyPrefix(types.<%= TypeName.UpperCamel %>KeyPrefix))
	iterator := storetypes.KVStorePrefixIterator(store, []byte{})

	defer iterator.Close()

	for ; iterator.Valid(); iterator.Next() {
		var val types.<%= TypeName.UpperCamel %>
		k.cdc.MustUnmarshal(iterator.Value(), &val)
        list = append(list, val)
	}

    return
}
