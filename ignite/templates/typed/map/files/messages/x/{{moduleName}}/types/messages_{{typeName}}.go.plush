package types

import (
	errorsmod "cosmossdk.io/errors"
	sdk "github.com/cosmos/cosmos-sdk/types"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
)

var _ sdk.Msg = &MsgCreate<%= TypeName.UpperCamel %>{}

func NewMsgCreate<%= TypeName.UpperCamel %>(
    <%= MsgSigner.LowerCamel %> string,
    <%= for (i, index) in Indexes { %><%= index.Name.LowerCamel %> <%= index.DataType() %>,
    <% } %><%= for (field) in Fields { %><%= field.Name.LowerCamel %> <%= field.DataType() %>,
    <% } %>
) *MsgCreate<%= TypeName.UpperCamel %> {
  return &MsgCreate<%= TypeName.UpperCamel %>{
		<%= MsgSigner.UpperCamel %> : <%= MsgSigner.LowerCamel %>,
		<%= for (index) in Indexes { %><%= index.Name.UpperCamel %>: <%= index.Name.LowerCamel %>,
		<% } %><%= for (field) in Fields { %><%= field.Name.UpperCamel %>: <%= field.Name.LowerCamel %>,
        <% } %>
	}
}

func (msg *MsgCreate<%= TypeName.UpperCamel %>) ValidateBasic() error {
  _, err := sdk.AccAddressFromBech32(msg.<%= MsgSigner.UpperCamel %>)
  	if err != nil {
  		return errorsmod.Wrapf(sdkerrors.ErrInvalidAddress, "invalid <%= MsgSigner.LowerCamel %> address (%s)", err)
  	}
  return nil
}

var _ sdk.Msg = &MsgUpdate<%= TypeName.UpperCamel %>{}

func NewMsgUpdate<%= TypeName.UpperCamel %>(
    <%= MsgSigner.LowerCamel %> string,
    <%= for (i, index) in Indexes { %><%= index.Name.LowerCamel %> <%= index.DataType() %>,
    <% } %><%= for (field) in Fields { %><%= field.Name.LowerCamel %> <%= field.DataType() %>,
    <% } %>
) *MsgUpdate<%= TypeName.UpperCamel %> {
  return &MsgUpdate<%= TypeName.UpperCamel %>{
		<%= MsgSigner.UpperCamel %>: <%= MsgSigner.LowerCamel %>,
        <%= for (index) in Indexes { %><%= index.Name.UpperCamel %>: <%= index.Name.LowerCamel %>,
        <% } %><%= for (field) in Fields { %><%= field.Name.UpperCamel %>: <%= field.Name.LowerCamel %>,
        <% } %>
	}
}

func (msg *MsgUpdate<%= TypeName.UpperCamel %>) ValidateBasic() error {
  _, err := sdk.AccAddressFromBech32(msg.<%= MsgSigner.UpperCamel %>)
  if err != nil {
    return errorsmod.Wrapf(sdkerrors.ErrInvalidAddress, "invalid <%= MsgSigner.LowerCamel %> address (%s)", err)
  }
   return nil
}

var _ sdk.Msg = &MsgDelete<%= TypeName.UpperCamel %>{}

func NewMsgDelete<%= TypeName.UpperCamel %>(
    <%= MsgSigner.LowerCamel %> string,
    <%= for (i, index) in Indexes { %><%= index.Name.LowerCamel %> <%= index.DataType() %>,
    <% } %>
) *MsgDelete<%= TypeName.UpperCamel %> {
  return &MsgDelete<%= TypeName.UpperCamel %>{
		<%= MsgSigner.UpperCamel %>: <%= MsgSigner.LowerCamel %>,
		<%= for (index) in Indexes { %><%= index.Name.UpperCamel %>: <%= index.Name.LowerCamel %>,
        <% } %>
	}
}

func (msg *MsgDelete<%= TypeName.UpperCamel %>) ValidateBasic() error {
  _, err := sdk.AccAddressFromBech32(msg.<%= MsgSigner.UpperCamel %>)
  if err != nil {
    return errorsmod.Wrapf(sdkerrors.ErrInvalidAddress, "invalid <%= MsgSigner.LowerCamel %> address (%s)", err)
  }
  return nil
}
