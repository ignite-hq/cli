package keeper

import (
	"context"

    "<%= ModulePath %>/x/<%= ModuleName %>/types"
    "cosmossdk.io/collections"
	errorsmod "cosmossdk.io/errors"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
)


func (k msgServer) Create<%= TypeName.UpperCamel %>(ctx context.Context,  msg *types.MsgCreate<%= TypeName.UpperCamel %>) (*types.MsgCreate<%= TypeName.UpperCamel %>Response, error) {
    // Check if the value already exists
    // TODO need to limit max nb of indexes
    ok, err := k.<%= TypeName.UpperCamel %>.Has(
        ctx,
        <%= for (i, index) in Indexes { %>msg.<%= index.Name.UpperCamel %>,
        <% } %>)
    if err != nil {
        return nil, errorsmod.Wrap(sdkerrors.ErrLogic, err.Error())
    } else if ok {
        return nil, errorsmod.Wrap(sdkerrors.ErrInvalidRequest, "index already set")
    }

    var <%= TypeName.LowerCamel %> = types.<%= TypeName.UpperCamel %>{
        <%= MsgSigner.UpperCamel %>: msg.<%= MsgSigner.UpperCamel %>,
        <%= for (i, index) in Indexes { %><%= index.Name.UpperCamel %>: msg.<%= index.Name.UpperCamel %>,
        <% } %><%= for (field) in Fields { %><%= field.Name.UpperCamel %>: msg.<%= field.Name.UpperCamel %>,
        <% } %>
    }

    if err := k.<%= TypeName.UpperCamel %>.Set(
   		ctx,
        <%= for (i, index) in Indexes { %>msg.<%= index.Name.UpperCamel %>,
        <% } %>
   		<%= TypeName.LowerCamel %>,
   	); err != nil {
        return nil, errorsmod.Wrap(sdkerrors.ErrLogic, "failed to set <%= index.Name.UpperCamel %>")
    }
	
    return &types.MsgCreate<%= TypeName.UpperCamel %>Response{}, nil
}

func (k msgServer) Update<%= TypeName.UpperCamel %>(ctx context.Context,  msg *types.MsgUpdate<%= TypeName.UpperCamel %>) (*types.MsgUpdate<%= TypeName.UpperCamel %>Response, error) {
    // Check if the value exists
    val, err := k.<%= TypeName.UpperCamel %>.Get(
        ctx,
        <%= for (i, index) in Indexes { %>msg.<%= index.Name.UpperCamel %>,
    <% } %>)
    if err != nil {
        if errors.Is(err, collections.ErrNotFound) {
            return nil, errorsmod.Wrap(sdkerrors.ErrKeyNotFound, "index not set")
        }

        return nil, errorsmod.Wrap(sdkerrors.ErrLogic, err.Error())
    }

    // Checks if the msg <%= MsgSigner.LowerCamel %> is the same as the current owner
    if msg.<%= MsgSigner.UpperCamel %> != val.<%= MsgSigner.UpperCamel %> {
        return nil, errorsmod.Wrap(sdkerrors.ErrUnauthorized, "incorrect owner")
    }

    var <%= TypeName.LowerCamel %> = types.<%= TypeName.UpperCamel %>{
		<%= MsgSigner.UpperCamel %>: msg.<%= MsgSigner.UpperCamel %>,
		<%= for (i, index) in Indexes { %><%= index.Name.UpperCamel %>: msg.<%= index.Name.UpperCamel %>,
        <% } %><%= for (field) in Fields { %><%= field.Name.UpperCamel %>: msg.<%= field.Name.UpperCamel %>,
		<% } %>
	}

	if err := k.<%= TypeName.UpperCamel %>.Set(ctx, <%= TypeName.LowerCamel %>); err != nil {
        return nil, errorsmod.Wrap(sdkerrors.ErrLogic, "failed to set <%= TypeName.LowerCamel %>")
    }

	return &types.MsgUpdate<%= TypeName.UpperCamel %>Response{}, nil
}

func (k msgServer) Delete<%= TypeName.UpperCamel %>(ctx context.Context,  msg *types.MsgDelete<%= TypeName.UpperCamel %>) (*types.MsgDelete<%= TypeName.UpperCamel %>Response, error) {
    // Check if the value exists
    val, err := k.<%= TypeName.UpperCamel %>.Get(
        ctx,
        <%= for (i, index) in Indexes { %>msg.<%= index.Name.UpperCamel %>,
    <% } %>)
    if err != nil {
        if errors.Is(err, collections.ErrNotFound) {
            return nil, errorsmod.Wrap(sdkerrors.ErrKeyNotFound, "index not set")
        }

        return nil, errorsmod.Wrap(sdkerrors.ErrLogic, err.Error())
    }

    // Checks if the msg <%= MsgSigner.LowerCamel %> is the same as the current owner
    if msg.<%= MsgSigner.UpperCamel %> != val.<%= MsgSigner.UpperCamel %> {
        return nil, errorsmod.Wrap(sdkerrors.ErrUnauthorized, "incorrect owner")
    }

	k.Remove<%= TypeName.UpperCamel %>(
	    ctx,
	<%= for (i, index) in Indexes { %>msg.<%= index.Name.UpperCamel %>,
    <% } %>)

	return &types.MsgDelete<%= TypeName.UpperCamel %>Response{}, nil
}
