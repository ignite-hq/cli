package simulation

import (
	"math/rand"

	"github.com/cosmos/cosmos-sdk/simsx"
	sdk "github.com/cosmos/cosmos-sdk/types"

	"<%= ModulePath %>/x/<%= ModuleName %>/keeper"
	"<%= ModulePath %>/x/<%= ModuleName %>/types"
)

func MsgCreate<%= TypeName.UpperCamel %>Factory(k keeper.Keeper) simsx.SimMsgFactoryFn[*types.MsgCreate<%= TypeName.UpperCamel %>] {
	return func(ctx context.Context, testData *simsx.ChainDataSource, reporter simsx.SimulationReporter) ([]simsx.SimAccount, *types.MsgCreate<%= TypeName.UpperCamel %>) {
		from := testData.AnyAccount(reporter)

		i := r.Int()
		msg := &types.MsgCreate<%= TypeName.UpperCamel %>{
			<%= MsgSigner.UpperCamel %>: from.AddressBech32,
			<%= Index.Name.UpperCamel %>: <%= Index.ValueLoop() %>,
		}
		found, err := k.<%= TypeName.UpperCamel %>.Has(ctx, msg.<%= Index.Name.UpperCamel %>)
		if err == nil && found {
			reporter.Skip("<%= TypeName.UpperCamel %> already exist")
			return nil, nil
		}

		return []simsx.SimAccount{from}, msg
	}
}

func MsgUpdate<%= TypeName.UpperCamel %>Factory(k keeper.Keeper) simsx.SimMsgFactoryFn[*types.MsgUpdate<%= TypeName.UpperCamel %>] {
	return func(ctx context.Context, testData *simsx.ChainDataSource, reporter simsx.SimulationReporter) ([]simsx.SimAccount, *types.MsgUpdate<%= TypeName.UpperCamel %>) {
		var (
			simAccount = simtypes.Account{}
			<%= TypeName.LowerCamel %> = types.<%= TypeName.UpperCamel %>{}
			msg = &types.MsgUpdate<%= TypeName.UpperCamel %>{}
			found = false
		)

		var all<%= TypeName.UpperCamel %> []types.<%= TypeName.UpperCamel %>
		err := k.<%= TypeName.UpperCamel %>.Walk(ctx, nil, func(key <%= Index.DataType() %>, value types.<%= TypeName.UpperCamel %>) (stop bool, err error) {
			all<%= TypeName.UpperCamel %> = append(all<%= TypeName.UpperCamel %>, value)
			return false, nil
		})
		if err != nil {
			reporter.Skip(err.Error())
			return nil, nil
		}
		for _, obj := range all<%= TypeName.UpperCamel %> {
			simAccount, found = FindAccount(accs, obj.<%= MsgSigner.UpperCamel %>)
			if found {
				<%= TypeName.LowerCamel %> = obj
				break
			}
		}
		if !found {
			reporter.Skip("<%= TypeName.LowerCamel %> <%= MsgSigner.LowerCamel %> not found")
			return nil, nil
		}
		msg.<%= MsgSigner.UpperCamel %> = simAccount.Address.String()
		msg.<%= Index.Name.UpperCamel %> = <%= TypeName.LowerCamel %>.<%= Index.Name.UpperCamel %>

		return []simsx.SimAccount{}, msg
	}
}

func MsgDelete<%= TypeName.UpperCamel %>Factory(k keeper.Keeper) simsx.SimMsgFactoryFn[*types.MsgDelete<%= TypeName.UpperCamel %>] {
	return func(ctx context.Context, testData *simsx.ChainDataSource, reporter simsx.SimulationReporter) ([]simsx.SimAccount, *types.MsgDelete<%= TypeName.UpperCamel %>) {
		var (
			simAccount = simtypes.Account{}
			<%= TypeName.LowerCamel %> = types.<%= TypeName.UpperCamel %>{}
			msg = &types.MsgUpdate<%= TypeName.UpperCamel %>{}
			found = false
		)
		var all<%= TypeName.UpperCamel %> []types.<%= TypeName.UpperCamel %>
		err := k.<%= TypeName.UpperCamel %>.Walk(ctx, nil, func(key <%= Index.DataType() %>, value types.<%= TypeName.UpperCamel %>) (stop bool, err error) {
			all<%= TypeName.UpperCamel %> = append(all<%= TypeName.UpperCamel %>, value)
			return false, nil
		})
		if err != nil {
			reporter.Skip(err.Error())
			return nil, nil
		}
		for _, obj := range all<%= TypeName.UpperCamel %> {
			simAccount, found = FindAccount(accs, obj.<%= MsgSigner.UpperCamel %>)
			if found {
				<%= TypeName.LowerCamel %> = obj
				break
			}
		}
		if !found {
			reporter.Skip("<%= TypeName.LowerCamel %> <%= MsgSigner.LowerCamel %> not found")
			return nil, nil
		}
		msg.<%= MsgSigner.UpperCamel %> = simAccount.Address.String()
		msg.<%= Index.Name.UpperCamel %> = <%= TypeName.LowerCamel %>.<%= Index.Name.UpperCamel %>

		return []simsx.SimAccount{}, msg
	}
}
