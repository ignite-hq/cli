package keeper

import (
	"context"
	"encoding/binary"

	"cosmossdk.io/store/prefix"
	storetypes "cosmossdk.io/store/types"
	"github.com/cosmos/cosmos-sdk/runtime"
	"<%= ModulePath %>/x/<%= ModuleName %>/types"
)

// Get<%= TypeName.UpperCamel %>Count get the total number of <%= TypeName.LowerCamel %>
func (k Keeper) Get<%= TypeName.UpperCamel %>Count(ctx context.Context) uint64 {
    storeAdapter := runtime.KVStoreAdapter(k.storeService.OpenKVStore(ctx))
	store :=  prefix.NewStore(storeAdapter, []byte{})
	byteKey := types.KeyPrefix(types.<%= TypeName.UpperCamel %>CountKey)
	bz := store.Get(byteKey)

	// Count doesn't exist: no element
	if bz == nil {
		return 0
	}

	// Parse bytes
	return binary.BigEndian.Uint64(bz)
}

// Set<%= TypeName.UpperCamel %>Count set the total number of <%= TypeName.LowerCamel %>
func (k Keeper) Set<%= TypeName.UpperCamel %>Count(ctx context.Context, count uint64)  {
    storeAdapter := runtime.KVStoreAdapter(k.storeService.OpenKVStore(ctx))
	store :=  prefix.NewStore(storeAdapter, []byte{})
	byteKey := types.KeyPrefix(types.<%= TypeName.UpperCamel %>CountKey)
	bz := make([]byte, 8)
	binary.BigEndian.PutUint64(bz, count)
	store.Set(byteKey, bz)
}

// Append<%= TypeName.UpperCamel %> appends a <%= TypeName.LowerCamel %> in the store with a new id and update the count
func (k Keeper) Append<%= TypeName.UpperCamel %>(
    ctx context.Context,
    <%= TypeName.LowerCamel %> types.<%= TypeName.UpperCamel %>,
) uint64 {
	// Create the <%= TypeName.LowerCamel %>
    count := k.Get<%= TypeName.UpperCamel %>Count(ctx)

    // Set the ID of the appended value
    <%= TypeName.LowerCamel %>.Id = count

    storeAdapter := runtime.KVStoreAdapter(k.storeService.OpenKVStore(ctx))
    store :=  prefix.NewStore(storeAdapter, types.KeyPrefix(types.<%= TypeName.UpperCamel %>Key))
    appendedValue := k.cdc.MustMarshal(&<%= TypeName.LowerCamel %>)
    store.Set(Get<%= TypeName.UpperCamel %>IDBytes(<%= TypeName.LowerCamel %>.Id), appendedValue)

    // Update <%= TypeName.LowerCamel %> count
    k.Set<%= TypeName.UpperCamel %>Count(ctx, count+1)

    return count
}

// Set<%= TypeName.UpperCamel %> set a specific <%= TypeName.LowerCamel %> in the store
func (k Keeper) Set<%= TypeName.UpperCamel %>(ctx context.Context, <%= TypeName.LowerCamel %> types.<%= TypeName.UpperCamel %>) {
    storeAdapter := runtime.KVStoreAdapter(k.storeService.OpenKVStore(ctx))
	store :=  prefix.NewStore(storeAdapter, types.KeyPrefix(types.<%= TypeName.UpperCamel %>Key))
	b := k.cdc.MustMarshal(&<%= TypeName.LowerCamel %>)
	store.Set(Get<%= TypeName.UpperCamel %>IDBytes(<%= TypeName.LowerCamel %>.Id), b)
}

// Get<%= TypeName.UpperCamel %> returns a <%= TypeName.LowerCamel %> from its id
func (k Keeper) Get<%=TypeName.UpperCamel %>(ctx context.Context, id uint64) (val types.<%= TypeName.UpperCamel %>, found bool) {
    storeAdapter := runtime.KVStoreAdapter(k.storeService.OpenKVStore(ctx))
	store := prefix.NewStore(storeAdapter, types.KeyPrefix(types.<%= TypeName.UpperCamel %>Key))
	b := store.Get(Get<%= TypeName.UpperCamel %>IDBytes(id))
	if b == nil {
		return val, false
	}
	k.cdc.MustUnmarshal(b, &val)
	return val, true
}

// Remove<%= TypeName.UpperCamel %> removes a <%= TypeName.LowerCamel %> from the store
func (k Keeper) Remove<%= TypeName.UpperCamel %>(ctx context.Context, id uint64) {
    storeAdapter := runtime.KVStoreAdapter(k.storeService.OpenKVStore(ctx))
	store := prefix.NewStore(storeAdapter, types.KeyPrefix(types.<%= TypeName.UpperCamel %>Key))
	store.Delete(Get<%= TypeName.UpperCamel %>IDBytes(id))
}

// GetAll<%= TypeName.UpperCamel %> returns all <%= TypeName.LowerCamel %>
func (k Keeper) GetAll<%= TypeName.UpperCamel %>(ctx context.Context) (list []types.<%= TypeName.UpperCamel %>) {
    storeAdapter := runtime.KVStoreAdapter(k.storeService.OpenKVStore(ctx))
    store := prefix.NewStore(storeAdapter, types.KeyPrefix(types.<%= TypeName.UpperCamel %>Key))
	iterator := storetypes.KVStorePrefixIterator(store, []byte{})

	defer iterator.Close()

	for ; iterator.Valid(); iterator.Next() {
		var val types.<%= TypeName.UpperCamel %>
		k.cdc.MustUnmarshal(iterator.Value(), &val)
        list = append(list, val)
	}

    return
}

// Get<%= TypeName.UpperCamel %>IDBytes returns the byte representation of the ID
func Get<%= TypeName.UpperCamel %>IDBytes(id uint64) []byte {
    bz := types.KeyPrefix(types.<%= TypeName.UpperCamel %>Key)
	bz = append(bz, []byte("/")...)
	bz = binary.BigEndian.AppendUint64(bz, id)
	return bz
}
