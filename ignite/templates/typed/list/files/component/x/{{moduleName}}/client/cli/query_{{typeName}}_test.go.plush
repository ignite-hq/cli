package cli_test

import (
	"fmt"
	"testing"

	"github.com/cosmos/cosmos-sdk/client/flags"
	clitestutil "github.com/cosmos/cosmos-sdk/testutil/cli"
	"github.com/stretchr/testify/require"
	tmcli "github.com/cometbft/cometbft/libs/cli"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"<%= ModulePath %>/testutil/nullify"
	"<%= ModulePath %>/x/<%= ModuleName %>/client/cli"
    "<%= ModulePath %>/x/<%= ModuleName %>/types"
)

func (s *IntegrationTestSuite) networkWith<%= TypeName.UpperCamel %>Objects(n int) []types.<%= TypeName.UpperCamel %> {
	s.T().Helper()
	state := types.GenesisState{<%= if (IsIBC) { %>PortId: types.PortID<% } %>}
	for i := 0; i < n; i++ {
		<%= TypeName.LowerCamel %> := types.<%= TypeName.UpperCamel %>{
    		Id: uint64(i),
    	}
		nullify.Fill(&<%= TypeName.LowerCamel %>)
		state.<%= TypeName.UpperCamel %>List = append(state.<%= TypeName.UpperCamel %>List, <%= TypeName.LowerCamel %>)
	}
	buf, err := s.cfg.Codec.MarshalJSON(&state)
	s.Require().NoError(err)
	s.cfg.GenesisState[types.ModuleName] = buf
	return state.<%= TypeName.UpperCamel %>List
}

func (s *IntegrationTestSuite) TestShow<%= TypeName.UpperCamel %>() {
	var (
		objs   = s.networkWith<%= TypeName.UpperCamel %>Objects(2)
		net    = s.network()
		ctx    = net.Validators[0].ClientCtx
		common = []string{
			fmt.Sprintf("--%s=json", tmcli.OutputFlag),
		}
	)
	tests := []struct {
		desc string
		id   string
		args []string
		err  error
		obj  types.<%= TypeName.UpperCamel %>
	}{
		{
			desc: "found",
			id:   fmt.Sprintf("%d", objs[0].Id),
			args: common,
			obj:  objs[0],
		},
		{
			desc: "not found",
			id:   "not_found",
			args: common,
			err:  status.Error(codes.NotFound, "not found"),
		},
	}
	for _, tc := range tests {
		s.T().Run(tc.desc, func(t *testing.T) {
			args := append([]string{tc.id}, tc.args...)
			out, err := clitestutil.ExecTestCLICmd(ctx, cli.CmdShow<%= TypeName.UpperCamel %>(), args)
			if tc.err != nil {
				stat, ok := status.FromError(tc.err)
				require.True(t, ok)
				require.ErrorIs(t, stat.Err(), tc.err)
				return
			}
            require.NoError(t, err)
            var resp types.QueryGet<%= TypeName.UpperCamel %>Response
            require.NoError(t, s.cfg.Codec.UnmarshalJSON(out.Bytes(), &resp))
            require.NotNil(t, resp.<%= TypeName.UpperCamel %>)
            require.Equal(t,
                nullify.Fill(&tc.obj),
                nullify.Fill(&resp.<%= TypeName.UpperCamel %>),
            )
		})
	}
}

func (s *IntegrationTestSuite) TestList<%= TypeName.UpperCamel %>() {
	var (
		objs   = s.networkWith<%= TypeName.UpperCamel %>Objects(5)
		net    = s.network()
		ctx    = net.Validators[0].ClientCtx
	)
	request := func(next []byte, offset, limit uint64, total bool) []string {
		args := []string{
			fmt.Sprintf("--%s=json", tmcli.OutputFlag),
		}
		if next == nil {
			args = append(args, fmt.Sprintf("--%s=%d", flags.FlagOffset, offset))
		} else {
			args = append(args, fmt.Sprintf("--%s=%s", flags.FlagPageKey, next))
		}
		args = append(args, fmt.Sprintf("--%s=%d", flags.FlagLimit, limit))
		if total {
			args = append(args, fmt.Sprintf("--%s", flags.FlagCountTotal))
		}
		return args
	}
	s.T().Run("ByOffset", func(t *testing.T) {
		step := 2
		for i := 0; i < len(objs); i += step {
			args := request(nil, uint64(i), uint64(step), false)
			out, err := clitestutil.ExecTestCLICmd(ctx, cli.CmdList<%= TypeName.UpperCamel %>(), args)
			require.NoError(t, err)
			var resp types.QueryAll<%= TypeName.UpperCamel %>Response
			require.NoError(t, s.cfg.Codec.UnmarshalJSON(out.Bytes(), &resp))
			require.LessOrEqual(t, len(resp.<%= TypeName.UpperCamel %>), step)
			require.Subset(t,
            	nullify.Fill(objs),
            	nullify.Fill(resp.<%= TypeName.UpperCamel %>),
            )
		}
	})
	s.T().Run("ByKey", func(t *testing.T) {
		step := 2
		var next []byte
		for i := 0; i < len(objs); i += step {
			args := request(next, 0, uint64(step), false)
			out, err := clitestutil.ExecTestCLICmd(ctx, cli.CmdList<%= TypeName.UpperCamel %>(), args)
			require.NoError(t, err)
			var resp types.QueryAll<%= TypeName.UpperCamel %>Response
			require.NoError(t, s.cfg.Codec.UnmarshalJSON(out.Bytes(), &resp))
			require.LessOrEqual(t, len(resp.<%= TypeName.UpperCamel %>), step)
			require.Subset(t,
				nullify.Fill(objs),
            	nullify.Fill(resp.<%= TypeName.UpperCamel %>),
            )
			next = resp.Pagination.NextKey
		}
	})
	s.T().Run("Total", func(t *testing.T) {
		args := request(nil, 0, uint64(len(objs)), true)
		out, err := clitestutil.ExecTestCLICmd(ctx, cli.CmdList<%= TypeName.UpperCamel %>(), args)
		require.NoError(t, err)
		var resp types.QueryAll<%= TypeName.UpperCamel %>Response
		require.NoError(t, s.cfg.Codec.UnmarshalJSON(out.Bytes(), &resp))
		require.NoError(t, err)
		require.Equal(t, len(objs), int(resp.Pagination.Total))
		require.ElementsMatch(t,
			nullify.Fill(objs),
			nullify.Fill(resp.<%= TypeName.UpperCamel %>),
		)
	})
}
